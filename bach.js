// Generated by CoffeeScript 1.10.0
(function() {
  var History, brain, defuzz, fileReader, fs, generate, readline, train, trainHist, vectors;

  brain = require('brain');

  fs = require('fs');

  readline = require('readline');

  vectors = [];

  History = (function() {
    function History(size) {
      this.size = size || 4;
    }

    History.prototype.vectorize = function() {
      return [].concat.apply([], this._history());
    };

    History.prototype.push = function(vector) {
      this._history().unshift(vector);
      this._history().pop();
      return vector;
    };

    History.prototype._history = function() {
      return this.__history || (this.__history = (function() {
        var j, ref, results;
        results = [];
        for (j = 0, ref = this.size; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--) {
          results.push(this._defaultVector());
        }
        return results;
      }).call(this));
    };

    History.prototype._defaultVector = function() {
      var j, results;
      results = [];
      for (j = 0; j < 100; j++) {
        results.push(null);
      }
      return results;
    };

    return History;

  })();

  defuzz = function(vector) {
    var cumulative, defuzzed, index, interval, j, len, rand, vectorSum;
    vectorSum = vector.reduce(function(a, b) {
      return a + b;
    });
    rand = Math.random() * vectorSum;
    cumulative = 0;
    defuzzed = (function() {
      var j, results;
      results = [];
      for (j = 0; j < 100; j++) {
        results.push(0);
      }
      return results;
    })();
    for (index = j = 0, len = vector.length; j < len; index = ++j) {
      interval = vector[index];
      cumulative = cumulative + interval;
      if (rand < cumulative) {
        console.log(index);
        defuzzed[index] = 1;
        break;
      }
    }
    return defuzzed;
  };

  generate = function(net) {
    var defuzzed, genHist, i, j, output, results;
    genHist = new History();
    results = [];
    for (i = j = 1; j <= 100; i = j += 1) {
      output = net.run(genHist.vectorize());
      defuzzed = defuzz(output);
      results.push(genHist.push(defuzzed));
    }
    return results;
  };

  train = function() {
    var net, stat;
    net = new brain.NeuralNetwork();
    stat = net.train(vectors, {
      errorThresh: 0.0085
    });
    console.warn(stat);
    return generate(net);
  };

  trainHist = new History();

  fileReader = readline.createInterface({
    input: fs.createReadStream('numbers'),
    terminal: false
  });

  fileReader.on('line', function(line) {
    var noteNumber, vector;
    noteNumber = parseInt(line, 10);
    if (!noteNumber) {
      return;
    }
    vector = (function() {
      var j, results;
      results = [];
      for (j = 0; j < 100; j++) {
        results.push(0);
      }
      return results;
    })();
    vector[noteNumber] = 1;
    vectors.push({
      input: trainHist.vectorize(),
      output: vector
    });
    return trainHist.push(vector);
  });

  fileReader.on('close', train);

}).call(this);
