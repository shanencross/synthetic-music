// Generated by CoffeeScript 1.10.0
(function() {
  var brain, defuzz, fileReader, fs, generate, prevVector, readline, train, vectors;

  brain = require('brain');

  fs = require('fs');

  readline = require('readline');

  vectors = [];

  prevVector = (function() {
    var j, results;
    results = [];
    for (j = 0; j < 100; j++) {
      results.push(null);
    }
    return results;
  })();

  defuzz = function(vector) {
    var cumulative, index, interval, j, len, rand, results, vectorSum;
    vectorSum = vector.reduce(function(a, b) {
      return a + b;
    });
    rand = Math.random() * vectorSum;
    cumulative = 0;
    results = [];
    for (index = j = 0, len = vector.length; j < len; index = ++j) {
      interval = vector[index];
      cumulative = cumulative + interval;
      if (rand < cumulative) {
        console.log(index);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  generate = function(net) {
    var i, j, output, results;
    prevVector = (function() {
      var j, results;
      results = [];
      for (j = 0; j < 100; j++) {
        results.push(null);
      }
      return results;
    })();
    results = [];
    for (i = j = 1; j <= 100; i = j += 1) {
      output = net.run(prevVector);
      defuzz(output);
      results.push(prevVector = output);
    }
    return results;
  };

  train = function() {
    var net;
    net = new brain.NeuralNetwork();
    net.train(vectors, {
      errorThresh: 0.0085
    });
    return generate(net);
  };

  fileReader = readline.createInterface({
    input: fs.createReadStream('numbers'),
    terminal: false
  });

  fileReader.on('line', function(line) {
    var noteNumber, vector;
    noteNumber = parseInt(line, 10);
    if (!noteNumber) {
      return;
    }
    vector = (function() {
      var j, results;
      results = [];
      for (j = 0; j < 100; j++) {
        results.push(0);
      }
      return results;
    })();
    vector[noteNumber] = 1;
    vectors.push({
      input: prevVector,
      output: vector
    });
    return prevVector = vector;
  });

  fileReader.on('close', train);

}).call(this);
